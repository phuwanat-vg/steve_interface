# config/navsat_transform.yaml
navsat_transform_node:
  ros__parameters:
    frequency: 30.0
    delay: 3.0 # Allow some delay for sensor data to arrive
    magnetic_declination_radians: 0.093084220955 # **IMPORTANT: Replace with your actual value (Nakhon Ratchasima)**
    yaw_offset: 0.0 # Adjust if your IMU's 0 yaw doesn't align with East
    zero_altitude: true # Set to true if you are operating in 2D
    publish_filtered_gps: true # Publish the GPS data transformed into a local frame
    use_odometry_yaw: true # Use the yaw from the odom_filtered topic (output of first EKF)
    wait_for_datum: false # Set to true if you want to explicitly define a datum

    # If wait_for_datum is true, you'd define these:
    # datum_latitude: <your_start_latitude>
    # datum_longitude: <your_start_longitude>
    # datum_altitude: <your_start_altitude>

    # Input topics: **CHANGE THESE TO YOUR ACTUAL TOPICS**
    gps_topic: /gps/fix # Topic publishing sensor_msgs/NavSatFix
    imu_topic: /imu/data # Topic publishing sensor_msgs/Imu
    odom_topic: /odom # The output of ekf_filter_node_odom

    # Output topic (used by the second EKF)
    # The odometry message derived from GPS
    frame_id: odom # This output odometry will be in the 'odom' frame
    child_frame_id: base_link # This output odometry is for base_link